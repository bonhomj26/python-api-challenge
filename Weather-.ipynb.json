{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import json\n",
    "import os as os\n",
    "import random\n",
    "# Import API KEY \n",
    "from citipy import citipy\n",
    "from config import gkey\n",
    "from config import api_key\n",
    "from pprint import pprint\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_data = \"output_data/cities.csv\"\n",
    "latituder =(-90,90)\n",
    "longituder=(-180,180)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the list to hold the random values\n",
    "range_value =[]\n",
    "cities = []\n",
    "latitudes = np.random.uniform(low = -90.000, high = 90.000, size=1800)\n",
    "longitudes = np.random.uniform(low=-180.000, high=180.000, size=1800)\n",
    "range_value =zip(latitudes, longitudes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "700"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Setting near est cities\n",
    "for values in range_value:\n",
    "    city = citipy.nearest_city(values[0], values[1]).city_name\n",
    "    \n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "        \n",
    "len(cities)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set rows\n",
    "number =1\n",
    "settings = {\"appid\": api_key, \"units\": \"imperial\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
    "query_url = f\"{url}appid={settings['appid']}&units={settings['units']}&q=\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting The Data\n",
      "------------------------------\n",
      "Printing The Data 1 of Set 1 | punta arenas\n",
      "Printing The Data 2 of Set 1 | mataura\n",
      "Printing The Data 3 of Set 1 | key west\n",
      "Printing The Data 4 of Set 1 | ribeira grande\n",
      "Printing The Data 5 of Set 1 | butaritari\n",
      "Printing The Data 6 of Set 1 | east london\n",
      "Printing The Data 7 of Set 1 | mayskiy\n",
      "Printing The Data 8 of Set 1 | kieta\n",
      "Printing The Data 9 of Set 1 | georgetown\n",
      "Printing The Data 10 of Set 1 | cabo san lucas\n",
      "Printing The Data 11 of Set 1 | hofn\n",
      "Printing The Data 12 of Set 1 | vila velha\n",
      "Printing The Data 13 of Set 1 | lakeside\n",
      "Printing The Data 14 of Set 1 | shubarshi\n",
      "Printing The Data 15 of Set 1 | wajima\n",
      "Printing The Data 16 of Set 1 | westport\n",
      "Printing The Data 17 of Set 1 | luanda\n",
      "Printing The Data 18 of Set 1 | busselton\n",
      "Printing The Data 19 of Set 1 | mys shmidta\n",
      "Printing The Data 20 of Set 1 | nikolskoye\n",
      "Printing The Data 21 of Set 1 | moron\n",
      "Printing The Data 22 of Set 1 | ushuaia\n",
      "Printing The Data 23 of Set 1 | antofagasta\n",
      "Printing The Data 24 of Set 1 | puerto ayora\n",
      "Printing The Data 25 of Set 1 | bluff\n",
      "Printing The Data 26 of Set 1 | evensk\n",
      "Printing The Data 27 of Set 1 | ilulissat\n",
      "Printing The Data 28 of Set 1 | ancud\n",
      "Printing The Data 29 of Set 1 | mtambile\n",
      "Printing The Data 30 of Set 1 | rikitea\n",
      "Printing The Data 31 of Set 1 | shache\n",
      "Printing The Data 32 of Set 1 | margate\n",
      "Printing The Data 33 of Set 1 | bethel\n",
      "Printing The Data 34 of Set 1 | tura\n",
      "Printing The Data 35 of Set 1 | yar-sale\n",
      "Printing The Data 36 of Set 1 | lebu\n",
      "Printing The Data 37 of Set 1 | haines junction\n",
      "Printing The Data 38 of Set 1 | warin chamrap\n",
      "Printing The Data 39 of Set 1 | vaini\n",
      "Printing The Data 40 of Set 1 | saint-philippe\n",
      "Printing The Data 41 of Set 1 | ivanteyevka\n",
      "Printing The Data 42 of Set 1 | hovd\n",
      "Printing The Data 43 of Set 1 | lompoc\n",
      "Printing The Data 44 of Set 1 | port alfred\n",
      "Printing The Data 45 of Set 1 | grand river south east\n",
      "Printing The Data 46 of Set 1 | kruisfontein\n",
      "Printing The Data 47 of Set 1 | lae\n",
      "Printing The Data 48 of Set 1 | inuvik\n",
      "Printing The Data 49 of Set 1 | hilo\n",
      "Printing The Data 1 of Set 2 | saskylakh\n",
      "Printing The Data 2 of Set 2 | gomel\n",
      "Printing The Data 3 of Set 2 | albany\n",
      "Printing The Data 4 of Set 2 | kokopo\n",
      "Printing The Data 5 of Set 2 | dikson\n",
      "Printing The Data 6 of Set 2 | san patricio\n",
      "Printing The Data 7 of Set 2 | yellowknife\n",
      "Just skip it If City not found.\n",
      "Printing The Data 8 of Set 2 | longyearbyen\n",
      "Just skip it If City not found.\n",
      "Just skip it If City not found.\n",
      "Printing The Data 9 of Set 2 | esperance\n",
      "Printing The Data 10 of Set 2 | yulara\n",
      "Printing The Data 11 of Set 2 | half moon bay\n",
      "Printing The Data 12 of Set 2 | qaanaaq\n",
      "Printing The Data 13 of Set 2 | kapaa\n",
      "Printing The Data 14 of Set 2 | harper\n",
      "Printing The Data 15 of Set 2 | shelburne\n",
      "Printing The Data 16 of Set 2 | hargeysa\n",
      "Printing The Data 17 of Set 2 | cape town\n",
      "Printing The Data 18 of Set 2 | cherskiy\n",
      "Printing The Data 19 of Set 2 | pozo colorado\n",
      "Printing The Data 20 of Set 2 | lagoa\n",
      "Printing The Data 21 of Set 2 | kunya\n",
      "Printing The Data 22 of Set 2 | hobart\n",
      "Just skip it If City not found.\n",
      "Printing The Data 23 of Set 2 | hithadhoo\n",
      "Printing The Data 24 of Set 2 | lasa\n",
      "Printing The Data 25 of Set 2 | tecoanapa\n",
      "Printing The Data 26 of Set 2 | lebanon\n",
      "Printing The Data 27 of Set 2 | mahebourg\n",
      "Printing The Data 28 of Set 2 | upernavik\n",
      "Just skip it If City not found.\n",
      "Printing The Data 29 of Set 2 | waddan\n",
      "Printing The Data 30 of Set 2 | caldwell\n",
      "Printing The Data 31 of Set 2 | kuusamo\n",
      "Printing The Data 32 of Set 2 | comodoro rivadavia\n",
      "Just skip it If City not found.\n",
      "Just skip it If City not found.\n",
      "Just skip it If City not found.\n",
      "Printing The Data 33 of Set 2 | atuona\n",
      "Printing The Data 34 of Set 2 | jamestown\n",
      "Printing The Data 35 of Set 2 | muravlenko\n",
      "Just skip it If City not found.\n",
      "Just skip it If City not found.\n",
      "Printing The Data 36 of Set 2 | ngunguru\n",
      "Printing The Data 37 of Set 2 | saldanha\n",
      "Just skip it If City not found.\n",
      "Printing The Data 38 of Set 2 | port hardy\n",
      "Printing The Data 39 of Set 2 | santiago del estero\n",
      "Printing The Data 40 of Set 2 | begun\n",
      "Printing The Data 41 of Set 2 | katherine\n",
      "Printing The Data 42 of Set 2 | fairbanks\n",
      "Printing The Data 43 of Set 2 | vryheid\n",
      "Just skip it If City not found.\n",
      "Printing The Data 44 of Set 2 | sao felix do xingu\n",
      "Printing The Data 45 of Set 2 | victoria\n",
      "Printing The Data 46 of Set 2 | barrow\n",
      "Printing The Data 47 of Set 2 | hasaki\n",
      "Printing The Data 48 of Set 2 | hermanus\n",
      "Just skip it If City not found.\n",
      "Printing The Data 49 of Set 2 | khatanga\n",
      "Printing The Data 1 of Set 3 | carnarvon\n",
      "Printing The Data 2 of Set 3 | iqaluit\n",
      "Printing The Data 3 of Set 3 | kodiak\n",
      "Printing The Data 4 of Set 3 | sabha\n",
      "Printing The Data 5 of Set 3 | svetlogorsk\n",
      "Printing The Data 6 of Set 3 | safaga\n",
      "Just skip it If City not found.\n",
      "Printing The Data 7 of Set 3 | thompson\n",
      "Printing The Data 8 of Set 3 | atambua\n",
      "Printing The Data 9 of Set 3 | orchard homes\n",
      "Printing The Data 10 of Set 3 | mar del plata\n",
      "Printing The Data 11 of Set 3 | indianola\n",
      "Printing The Data 12 of Set 3 | ponta do sol\n",
      "Printing The Data 13 of Set 3 | corrales\n",
      "Just skip it If City not found.\n",
      "Printing The Data 14 of Set 3 | tasiilaq\n",
      "Printing The Data 15 of Set 3 | bredasdorp\n",
      "Printing The Data 16 of Set 3 | hun\n",
      "Printing The Data 17 of Set 3 | new norfolk\n",
      "Printing The Data 18 of Set 3 | san andres\n",
      "Printing The Data 19 of Set 3 | severo-kurilsk\n",
      "Printing The Data 20 of Set 3 | kenai\n",
      "Printing The Data 21 of Set 3 | ibra\n",
      "Printing The Data 22 of Set 3 | luderitz\n",
      "Printing The Data 23 of Set 3 | hirado\n",
      "Printing The Data 24 of Set 3 | yenangyaung\n",
      "Printing The Data 25 of Set 3 | kahului\n",
      "Printing The Data 26 of Set 3 | namibe\n",
      "Printing The Data 27 of Set 3 | souillac\n",
      "Printing The Data 28 of Set 3 | torbay\n",
      "Printing The Data 29 of Set 3 | port elizabeth\n",
      "Printing The Data 30 of Set 3 | mount isa\n",
      "Printing The Data 31 of Set 3 | marfino\n",
      "Printing The Data 32 of Set 3 | pitea\n",
      "Just skip it If City not found.\n",
      "Printing The Data 33 of Set 3 | kloulklubed\n",
      "Just skip it If City not found.\n",
      "Printing The Data 34 of Set 3 | talnakh\n",
      "Printing The Data 35 of Set 3 | pandan\n",
      "Printing The Data 36 of Set 3 | maraa\n",
      "Printing The Data 37 of Set 3 | baruun-urt\n",
      "Printing The Data 38 of Set 3 | nipawin\n",
      "Printing The Data 39 of Set 3 | lavrentiya\n",
      "Printing The Data 40 of Set 3 | sioux lookout\n",
      "Printing The Data 41 of Set 3 | belen\n",
      "Printing The Data 42 of Set 3 | hamilton\n",
      "Printing The Data 43 of Set 3 | port blair\n",
      "Printing The Data 44 of Set 3 | ostrovnoy\n",
      "Printing The Data 45 of Set 3 | chuy\n",
      "Printing The Data 46 of Set 3 | gandajika\n",
      "Printing The Data 47 of Set 3 | petrivka\n",
      "Printing The Data 48 of Set 3 | paka\n",
      "Printing The Data 49 of Set 3 | krasnoselkup\n",
      "Printing The Data 1 of Set 4 | west odessa\n",
      "Printing The Data 2 of Set 4 | fort nelson\n",
      "Printing The Data 3 of Set 4 | nakasongola\n",
      "Just skip it If City not found.\n",
      "Printing The Data 4 of Set 4 | beawar\n",
      "Printing The Data 5 of Set 4 | nemuro\n",
      "Printing The Data 6 of Set 4 | clarence town\n",
      "Printing The Data 7 of Set 4 | reo\n",
      "Printing The Data 8 of Set 4 | bogalusa\n",
      "Just skip it If City not found.\n",
      "Printing The Data 9 of Set 4 | port lincoln\n",
      "Printing The Data 10 of Set 4 | eydhafushi\n",
      "Printing The Data 11 of Set 4 | tonantins\n",
      "Just skip it If City not found.\n",
      "Printing The Data 12 of Set 4 | clyde river\n",
      "Printing The Data 13 of Set 4 | gigmoto\n",
      "Printing The Data 14 of Set 4 | ambon\n",
      "Printing The Data 15 of Set 4 | skjervoy\n",
      "Printing The Data 16 of Set 4 | gamba\n",
      "Printing The Data 17 of Set 4 | tuktoyaktuk\n",
      "Printing The Data 18 of Set 4 | kalmunai\n",
      "Printing The Data 19 of Set 4 | kyshtovka\n",
      "Printing The Data 20 of Set 4 | cidreira\n",
      "Printing The Data 21 of Set 4 | kaitangata\n",
      "Just skip it If City not found.\n",
      "Printing The Data 22 of Set 4 | rio branco\n",
      "Printing The Data 23 of Set 4 | adilcevaz\n",
      "Printing The Data 24 of Set 4 | hanno\n",
      "Printing The Data 25 of Set 4 | aklavik\n",
      "Printing The Data 26 of Set 4 | xinzhou\n",
      "Printing The Data 27 of Set 4 | chapais\n",
      "Just skip it If City not found.\n",
      "Printing The Data 28 of Set 4 | pachino\n",
      "Printing The Data 29 of Set 4 | olinda\n",
      "Printing The Data 30 of Set 4 | bozeman\n",
      "Printing The Data 31 of Set 4 | guaruja\n",
      "Printing The Data 32 of Set 4 | bathsheba\n",
      "Printing The Data 33 of Set 4 | linjiang\n",
      "Just skip it If City not found.\n",
      "Printing The Data 34 of Set 4 | chumphon\n",
      "Printing The Data 35 of Set 4 | innisfail\n",
      "Printing The Data 36 of Set 4 | pokhara\n",
      "Printing The Data 37 of Set 4 | tuatapere\n",
      "Printing The Data 38 of Set 4 | nara\n",
      "Printing The Data 39 of Set 4 | karratha\n",
      "Printing The Data 40 of Set 4 | spasskoye\n",
      "Printing The Data 41 of Set 4 | shu\n",
      "Printing The Data 42 of Set 4 | san carlos\n",
      "Printing The Data 43 of Set 4 | castro\n",
      "Printing The Data 44 of Set 4 | jales\n",
      "Just skip it If City not found.\n",
      "Printing The Data 45 of Set 4 | saint-pierre\n",
      "Printing The Data 46 of Set 4 | north bend\n",
      "Printing The Data 47 of Set 4 | qarayeri\n",
      "Printing The Data 48 of Set 4 | awjilah\n",
      "Printing The Data 49 of Set 4 | castelo branco\n",
      "Printing The Data 1 of Set 5 | najran\n",
      "Printing The Data 2 of Set 5 | arraial do cabo\n",
      "Printing The Data 3 of Set 5 | cockburn town\n",
      "Printing The Data 4 of Set 5 | college\n",
      "Printing The Data 5 of Set 5 | chokurdakh\n",
      "Printing The Data 6 of Set 5 | yuanping\n",
      "Printing The Data 7 of Set 5 | alta floresta\n",
      "Printing The Data 8 of Set 5 | sol-iletsk\n",
      "Printing The Data 9 of Set 5 | ola\n",
      "Printing The Data 10 of Set 5 | bhatkal\n",
      "Printing The Data 11 of Set 5 | nanortalik\n",
      "Printing The Data 12 of Set 5 | korla\n",
      "Printing The Data 13 of Set 5 | tazovskiy\n",
      "Printing The Data 14 of Set 5 | nelson bay\n",
      "Printing The Data 15 of Set 5 | oktyabrskiy\n",
      "Printing The Data 16 of Set 5 | odweyne\n",
      "Printing The Data 17 of Set 5 | forecariah\n",
      "Printing The Data 18 of Set 5 | tessalit\n",
      "Printing The Data 19 of Set 5 | omsukchan\n",
      "Printing The Data 20 of Set 5 | moa\n",
      "Printing The Data 21 of Set 5 | hostinne\n",
      "Printing The Data 22 of Set 5 | poum\n",
      "Printing The Data 23 of Set 5 | flinders\n",
      "Printing The Data 24 of Set 5 | tiksi\n",
      "Printing The Data 25 of Set 5 | quesnel\n",
      "Printing The Data 26 of Set 5 | aguimes\n",
      "Printing The Data 27 of Set 5 | yaan\n",
      "Printing The Data 28 of Set 5 | srednekolymsk\n",
      "Printing The Data 29 of Set 5 | chingola\n",
      "Printing The Data 30 of Set 5 | yerbogachen\n",
      "Printing The Data 31 of Set 5 | stanghelle\n",
      "Printing The Data 32 of Set 5 | gat\n",
      "Printing The Data 33 of Set 5 | ixtapa\n",
      "Printing The Data 34 of Set 5 | shitanjing\n",
      "Printing The Data 35 of Set 5 | camapua\n",
      "Printing The Data 36 of Set 5 | belmonte\n",
      "Just skip it If City not found.\n",
      "Just skip it If City not found.\n",
      "Printing The Data 37 of Set 5 | bokoro\n",
      "Printing The Data 38 of Set 5 | west wendover\n",
      "Printing The Data 39 of Set 5 | hirara\n",
      "Printing The Data 40 of Set 5 | salalah\n",
      "Printing The Data 41 of Set 5 | rezekne\n",
      "Printing The Data 42 of Set 5 | ahipara\n",
      "Printing The Data 43 of Set 5 | aksarka\n",
      "Printing The Data 44 of Set 5 | bengkulu\n",
      "Printing The Data 45 of Set 5 | faanui\n",
      "Printing The Data 46 of Set 5 | grand gaube\n",
      "Printing The Data 47 of Set 5 | fevik\n",
      "Printing The Data 48 of Set 5 | dunmanway\n",
      "Printing The Data 49 of Set 5 | buala\n",
      "Printing The Data 1 of Set 6 | killybegs\n",
      "Just skip it If City not found.\n",
      "Printing The Data 2 of Set 6 | fortuna\n",
      "Printing The Data 3 of Set 6 | yabelo\n",
      "Printing The Data 4 of Set 6 | husavik\n",
      "Printing The Data 5 of Set 6 | nouadhibou\n",
      "Printing The Data 6 of Set 6 | awbari\n",
      "Printing The Data 7 of Set 6 | muros\n",
      "Printing The Data 8 of Set 6 | klaksvik\n",
      "Printing The Data 9 of Set 6 | vardo\n",
      "Printing The Data 10 of Set 6 | znamenskoye\n",
      "Printing The Data 11 of Set 6 | coos bay\n",
      "Printing The Data 12 of Set 6 | nhulunbuy\n",
      "Printing The Data 13 of Set 6 | tadine\n",
      "Printing The Data 14 of Set 6 | provideniya\n",
      "Printing The Data 15 of Set 6 | madang\n",
      "Printing The Data 16 of Set 6 | mehamn\n",
      "Printing The Data 17 of Set 6 | yenagoa\n",
      "Printing The Data 18 of Set 6 | lagunillas\n",
      "Printing The Data 19 of Set 6 | trincomalee\n",
      "Printing The Data 20 of Set 6 | komsomolskiy\n",
      "Printing The Data 21 of Set 6 | araouane\n",
      "Printing The Data 22 of Set 6 | shasta lake\n",
      "Printing The Data 23 of Set 6 | urumqi\n",
      "Printing The Data 24 of Set 6 | georgiyevka\n",
      "Printing The Data 25 of Set 6 | macas\n",
      "Printing The Data 26 of Set 6 | avarua\n",
      "Printing The Data 27 of Set 6 | alice springs\n",
      "Just skip it If City not found.\n",
      "Printing The Data 28 of Set 6 | eureka\n",
      "Printing The Data 29 of Set 6 | praia\n",
      "Printing The Data 30 of Set 6 | maningrida\n",
      "Printing The Data 31 of Set 6 | chinhoyi\n",
      "Just skip it If City not found.\n",
      "Printing The Data 32 of Set 6 | hervey bay\n",
      "Printing The Data 33 of Set 6 | nha trang\n",
      "Printing The Data 34 of Set 6 | zhigansk\n",
      "Printing The Data 35 of Set 6 | gubkinskiy\n",
      "Printing The Data 36 of Set 6 | dunedin\n",
      "Printing The Data 37 of Set 6 | correntina\n",
      "Printing The Data 38 of Set 6 | strezhevoy\n",
      "Printing The Data 39 of Set 6 | enid\n",
      "Printing The Data 40 of Set 6 | vicksburg\n",
      "Printing The Data 41 of Set 6 | leningradskiy\n",
      "Printing The Data 42 of Set 6 | dandong\n",
      "Printing The Data 43 of Set 6 | san cristobal\n",
      "Printing The Data 44 of Set 6 | rio gallegos\n",
      "Printing The Data 45 of Set 6 | byron bay\n",
      "Printing The Data 46 of Set 6 | kaabong\n",
      "Just skip it If City not found.\n",
      "Printing The Data 47 of Set 6 | uva\n",
      "Printing The Data 48 of Set 6 | alyangula\n",
      "Printing The Data 49 of Set 6 | lata\n",
      "Printing The Data 1 of Set 7 | hobyo\n",
      "Just skip it If City not found.\n",
      "Printing The Data 2 of Set 7 | pemba\n",
      "Printing The Data 3 of Set 7 | markova\n",
      "Printing The Data 4 of Set 7 | tocopilla\n",
      "Printing The Data 5 of Set 7 | las palmas\n",
      "Printing The Data 6 of Set 7 | sitka\n",
      "Printing The Data 7 of Set 7 | nome\n",
      "Printing The Data 8 of Set 7 | palaikastron\n",
      "Printing The Data 9 of Set 7 | grande prairie\n",
      "Printing The Data 10 of Set 7 | palana\n",
      "Printing The Data 11 of Set 7 | catabola\n",
      "Printing The Data 12 of Set 7 | guerrero\n",
      "Just skip it If City not found.\n",
      "Printing The Data 13 of Set 7 | baykit\n",
      "Printing The Data 14 of Set 7 | sao jose da coroa grande\n",
      "Printing The Data 15 of Set 7 | asau\n",
      "Printing The Data 16 of Set 7 | richards bay\n",
      "Printing The Data 17 of Set 7 | nanakuli\n",
      "Printing The Data 18 of Set 7 | codrington\n",
      "Printing The Data 19 of Set 7 | marawi\n",
      "Printing The Data 20 of Set 7 | bambous virieux\n",
      "Just skip it If City not found.\n",
      "Printing The Data 21 of Set 7 | akyab\n",
      "Printing The Data 22 of Set 7 | kununurra\n",
      "Just skip it If City not found.\n",
      "Printing The Data 23 of Set 7 | repatriacion\n",
      "Just skip it If City not found.\n",
      "Printing The Data 24 of Set 7 | anshun\n",
      "Printing The Data 25 of Set 7 | santa maria\n",
      "Printing The Data 26 of Set 7 | rodbyhavn\n",
      "Printing The Data 27 of Set 7 | port hueneme\n",
      "Printing The Data 28 of Set 7 | amahai\n",
      "Printing The Data 29 of Set 7 | sisimiut\n",
      "Printing The Data 30 of Set 7 | boden\n",
      "Printing The Data 31 of Set 7 | nishihara\n",
      "Printing The Data 32 of Set 7 | catamarca\n",
      "Printing The Data 33 of Set 7 | darhan\n",
      "Printing The Data 34 of Set 7 | mahroni\n",
      "Printing The Data 35 of Set 7 | ondangwa\n",
      "Just skip it If City not found.\n",
      "Printing The Data 36 of Set 7 | zilair\n",
      "Printing The Data 37 of Set 7 | hay river\n",
      "Printing The Data 38 of Set 7 | manono\n",
      "Printing The Data 39 of Set 7 | berlevag\n",
      "Just skip it If City not found.\n",
      "Printing The Data 40 of Set 7 | vallenar\n",
      "Printing The Data 41 of Set 7 | skibbereen\n",
      "Just skip it If City not found.\n",
      "Printing The Data 42 of Set 7 | omboue\n",
      "Printing The Data 43 of Set 7 | tumut\n",
      "Printing The Data 44 of Set 7 | sobolevo\n",
      "Printing The Data 45 of Set 7 | araceli\n",
      "Printing The Data 46 of Set 7 | bara\n",
      "Printing The Data 47 of Set 7 | port hedland\n",
      "Printing The Data 48 of Set 7 | dalbandin\n",
      "Just skip it If City not found.\n",
      "Printing The Data 49 of Set 7 | parati\n",
      "Printing The Data 1 of Set 8 | jalu\n",
      "Just skip it If City not found.\n",
      "Printing The Data 2 of Set 8 | mranggen\n",
      "Printing The Data 3 of Set 8 | dakar\n",
      "Printing The Data 4 of Set 8 | airai\n",
      "Printing The Data 5 of Set 8 | kavieng\n",
      "Printing The Data 6 of Set 8 | kilindoni\n",
      "Printing The Data 7 of Set 8 | townsville\n",
      "Printing The Data 8 of Set 8 | ladario\n",
      "Printing The Data 9 of Set 8 | saint-augustin\n",
      "Printing The Data 10 of Set 8 | vostok\n",
      "Printing The Data 11 of Set 8 | norman wells\n",
      "Printing The Data 12 of Set 8 | southbridge\n",
      "Printing The Data 13 of Set 8 | pasighat\n",
      "Printing The Data 14 of Set 8 | sao filipe\n",
      "Printing The Data 15 of Set 8 | tilichiki\n",
      "Printing The Data 16 of Set 8 | warrington\n",
      "Printing The Data 17 of Set 8 | oslob\n",
      "Printing The Data 18 of Set 8 | samarai\n",
      "Printing The Data 19 of Set 8 | noshiro\n",
      "Printing The Data 20 of Set 8 | sesheke\n",
      "Printing The Data 21 of Set 8 | miri\n",
      "Printing The Data 22 of Set 8 | riyadh\n",
      "Printing The Data 23 of Set 8 | alofi\n",
      "Printing The Data 24 of Set 8 | kutum\n",
      "Printing The Data 25 of Set 8 | svetlyy\n",
      "Just skip it If City not found.\n",
      "Printing The Data 26 of Set 8 | teano\n",
      "Printing The Data 27 of Set 8 | lorengau\n",
      "Printing The Data 28 of Set 8 | chernushka\n",
      "Printing The Data 29 of Set 8 | tsiroanomandidy\n",
      "Printing The Data 30 of Set 8 | bardiyah\n",
      "Just skip it If City not found.\n",
      "Printing The Data 31 of Set 8 | okha\n",
      "Printing The Data 32 of Set 8 | mandalgovi\n",
      "Just skip it If City not found.\n",
      "Printing The Data 33 of Set 8 | kargil\n",
      "Printing The Data 34 of Set 8 | mayo\n",
      "Printing The Data 35 of Set 8 | bhayavadar\n",
      "Printing The Data 36 of Set 8 | makakilo city\n",
      "Printing The Data 37 of Set 8 | aloleng\n",
      "Printing The Data 38 of Set 8 | kropotkin\n",
      "Just skip it If City not found.\n",
      "Printing The Data 39 of Set 8 | quelimane\n",
      "Printing The Data 40 of Set 8 | terney\n",
      "Printing The Data 41 of Set 8 | soe\n",
      "Printing The Data 42 of Set 8 | san jose de rio tinto\n",
      "Printing The Data 43 of Set 8 | troitsko-pechorsk\n",
      "Printing The Data 44 of Set 8 | sambava\n",
      "Printing The Data 45 of Set 8 | roma\n",
      "Printing The Data 46 of Set 8 | bereda\n",
      "Printing The Data 47 of Set 8 | phan thiet\n",
      "Just skip it If City not found.\n",
      "Printing The Data 48 of Set 8 | atar\n",
      "Printing The Data 49 of Set 8 | pangnirtung\n",
      "Printing The Data 1 of Set 9 | isangel\n",
      "Printing The Data 2 of Set 9 | weligama\n",
      "Just skip it If City not found.\n",
      "Printing The Data 3 of Set 9 | yakeshi\n",
      "Printing The Data 4 of Set 9 | truro\n",
      "Just skip it If City not found.\n",
      "Printing The Data 5 of Set 9 | alihe\n",
      "Printing The Data 6 of Set 9 | uarini\n",
      "Printing The Data 7 of Set 9 | banda aceh\n",
      "Printing The Data 8 of Set 9 | ypsonas\n",
      "Just skip it If City not found.\n",
      "Printing The Data 9 of Set 9 | kyren\n",
      "Printing The Data 10 of Set 9 | outjo\n",
      "Printing The Data 11 of Set 9 | rocha\n",
      "Printing The Data 12 of Set 9 | pemangkat\n",
      "Printing The Data 13 of Set 9 | sumbuya\n",
      "Printing The Data 14 of Set 9 | bure\n",
      "Printing The Data 15 of Set 9 | tiffin\n",
      "Printing The Data 16 of Set 9 | mangan\n",
      "Printing The Data 17 of Set 9 | vao\n",
      "Just skip it If City not found.\n",
      "Printing The Data 18 of Set 9 | ulladulla\n",
      "Printing The Data 19 of Set 9 | camacupa\n",
      "Printing The Data 20 of Set 9 | grand-santi\n",
      "Printing The Data 21 of Set 9 | taoudenni\n",
      "Printing The Data 22 of Set 9 | mitsamiouli\n",
      "Printing The Data 23 of Set 9 | bighapur\n",
      "Printing The Data 24 of Set 9 | kedrovyy\n",
      "Printing The Data 25 of Set 9 | workington\n",
      "Printing The Data 26 of Set 9 | porto walter\n",
      "Printing The Data 27 of Set 9 | bitung\n",
      "Printing The Data 28 of Set 9 | vila praia de ancora\n",
      "Printing The Data 29 of Set 9 | veraval\n",
      "Printing The Data 30 of Set 9 | vilyuysk\n"
     ]
    }
   ],
   "source": [
    "value_city = []\n",
    "cloud = []\n",
    "dates = []\n",
    "humidities = []\n",
    "latitudes = []\n",
    "longitudes = []\n",
    "temperatures = []\n",
    "winds = []\n",
    "countries = []\n",
    "\n",
    "# set initial count quantities for organization\n",
    "counter = 0\n",
    "set_counter = 1\n",
    "\n",
    "# loops for creating dataframe columns\n",
    "print(\"Getting The Data\\n------------------------------\")\n",
    "for city in cities:\n",
    "    try:\n",
    "        response = requests.get(query_url + city.replace(\" \",\"&\")).json()\n",
    "        cloud.append(response['clouds']['all'])\n",
    "        countries.append(response['sys']['country'])\n",
    "        dates.append(response['dt'])\n",
    "        humidities.append(response['main']['humidity'])\n",
    "        latitudes.append(response['coord']['lat'])\n",
    "        longitudes.append(response['coord']['lon'])\n",
    "        temperatures.append(response['main']['temp'])\n",
    "        winds.append(response['wind']['speed'])\n",
    "        if counter > 48:\n",
    "            counter = 1\n",
    "            set_counter += 1\n",
    "            value_city.append(city)\n",
    "        else:\n",
    "            counter += 1\n",
    "            value_city.append(city)\n",
    "        print(f\"Printing The Data {counter} of Set {set_counter} | {city}\")\n",
    "    except Exception:\n",
    "        print(\"Just skip it If City not found.\")\n",
    "print(\"------------------------------\\nThat's The End\\n------------------------------\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting the Dataframe\n",
    "weatherdf = {\n",
    "    \"City\":value_city,\n",
    "    \"Country\":countries,\n",
    "    \"Latitude\":latitudes,\n",
    "    \"Longitude\": longitudes,\n",
    "    \"Cloudiness %\":cloud,\n",
    "    \"Humidity %\" :humidities,\n",
    "    \"Temperature\":temperatures,\n",
    "    \"Wind Speed (mph)\":winds\n",
    "}\n",
    "# Dataframe\n",
    "weather_df = pd.DataFrame(weatherdf)\n",
    "weather_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting Latitude vs.Temperature\n",
    "\n",
    "plt.scatter(weather_df[\"Latitude\"],weather_df[\"Temperature\"],edgecolors=\"black\",facecolors=\"yellow\")\n",
    "plt.title(\"Temperature vs. Latitude\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.ylabel(\"Temperature (F)\")\n",
    "plt.grid (b=True,which=\"major\",axis=\"both\",linestyle=\"-\",color=\"lightgrey\")\n",
    "plt.savefig(\"Figures/fig1.png\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see from the graph, as the latitude increases, the temperature falls which is expected. We can conclude by saying that the data is correlated. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Latitude vs. Humidity\n",
    "\n",
    "plt.scatter(weather_df[\"Latitude\"],weather_df[\"Humidity %\"],edgecolors=\"black\",facecolors=\"purple\")\n",
    "plt.title(\"Humidity (%) vs. Latitude\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.ylabel(\"Humidity (%)\")\n",
    "plt.ylim(15,105)\n",
    "plt.grid (b=True,which=\"major\",axis=\"both\",linestyle=\"-\",color=\"lightgrey\")\n",
    "plt.savefig(\"Figures/fig2.png\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, the data is all over the graph and there is almost no correlation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Latitude vs. Cloudiness\n",
    "plt.scatter(weather_df[\"Latitude\"],weather_df[\"Cloudiness %\"],edgecolors=\"black\",facecolors=\"yellow\")\n",
    "plt.title(\"Cloudiness % vs. Latitude\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.ylabel(\"Cloudiness (%)\")\n",
    "plt.grid (b=True,which=\"major\",axis=\"both\",linestyle=\"-\",color=\"lightgrey\")\n",
    "plt.savefig(\"Figures/fig3.png\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although it seems as if there no correlation, however the data appears to have a good distribution or concentration as the cloud increases from 0 to 20% and from 75% to 100%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Latitude vs. Wind Speed\n",
    "plt.scatter(weather_df[\"Latitude\"],weather_df[\"Wind Speed (mph)\"],edgecolors=\"black\",facecolors=\"red\")\n",
    "plt.title(\"Wind Speed (mph) vs. Latitude\")\n",
    "plt.xlabel(\"Latitude\")\n",
    "plt.ylabel(\"Wind Speed (mph)\")\n",
    "plt.ylim(-2,34)\n",
    "plt.grid (b=True,which=\"major\",axis=\"both\",linestyle=\"-\",color=\"lightgrey\")\n",
    "plt.savefig(\"Figures/fig4.png\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we have a clustered data from 0 >= mph <=15 which not necessarily an indication of a strongly correlated data. we can only suggest that there are a group of cities experiencing wind at a speed from 0 to 15 mph, and a handful of cities experiencing wind at a speed higer than 15 mph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_df.to_csv(output_data, encoding=\"utf-8\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Second requirement:\n",
    "- Run linear regression on each relationship, only this time \n",
    "    * Separate them into Northern Hemisphere (greater than or equal to 0     degrees latitude) and \n",
    "     * Southern Hemisphere (less than 0 degrees latitude):\n",
    "\n",
    "* Northern Hemisphere - Temperature (F) vs. Latitude\n",
    "* Southern Hemisphere - Temperature (F) vs. Latitude\n",
    "* Northern Hemisphere - Humidity (%) vs. Latitude\n",
    "* Southern Hemisphere - Humidity (%) vs. Latitude\n",
    "* Northern Hemisphere - Cloudiness (%) vs. Latitude\n",
    "* Southern Hemisphere - Cloudiness (%) vs. Latitude\n",
    "* Northern Hemisphere - Wind Speed (mph) vs. Latitude\n",
    "* Southern Hemisphere - Wind Speed (mph) vs. Latitude\n",
    "\n",
    " - After each pair of plots explain what the linear regression is modeling such as any relationships you notice and any other analysis you may have.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LINEAR REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Northern and Southern Hemisphere Dataframes\n",
    "northern_df = weather_df.loc[pd.to_numeric(weather_df[\"Latitude\"]).astype(float) > 0, :]\n",
    "southern_df = weather_df.loc[pd.to_numeric(weather_df[\"Latitude\"]).astype(float) < 0, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Northern Hemisphere - Max Temp vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(northern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(northern_df['Temperature']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Temperature (F)')\n",
    "plt.title('Northern Hemisphere - Temperature vs. Latitude Linear')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot displays a negative correlation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Southern Hemisphere - Temperature vs. Latitude\n",
    "x_values = pd.to_numeric(southern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(southern_df['Temperature']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"Theline equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Temperature (F)')\n",
    "plt.title('Southern Hemisphere - Temperature vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot displays a possive correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Northern Hemisphere - Humidity (%) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(northern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(northern_df['Humidity %']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Humidity (%)')\n",
    "plt.title('Northern Hemisphere - Humidity (%) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\") \n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot does not show if any correlation at all... Difficult to predict any correlation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Southern Hemisphere - Humidity (%) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(southern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(southern_df['Humidity %']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Humidity (%)')\n",
    "plt.title('Southern Hemisphere - Humidity (%) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data appears to be scattered and there in no correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Northern Hemisphere - Cloudiness (%) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(northern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(northern_df['Cloudiness %']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Cloudiness (%)')\n",
    "plt.title('Northern Hemisphere - Cloudiness (%) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot does not display any correlation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Southern Hemisphere - Cloudiness (%) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(southern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(southern_df['Cloudiness %']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Cloudiness (%)')\n",
    "plt.title('Southern Hemisphere - Cloudiness (%) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No correlation between the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Northern Hemisphere - Wind Speed (mph) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(northern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(northern_df['Wind Speed (mph)']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Wind Speed (mph)')\n",
    "plt.title('Northern Hemisphere - Wind Speed (mph) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot doesn't display a high degree of correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Southern Hemisphere - Wind Speed (mph) vs. Latitude\n",
    "\n",
    "x_values = pd.to_numeric(southern_df['Latitude']).astype(float)\n",
    "y_values = pd.to_numeric(southern_df['Wind Speed (mph)']).astype(float)\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "print(f\"The line equation is: {line_eq}\")\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Wind Speed (mph)')\n",
    "plt.title('Southern Hemisphere - Wind Speed (mph) vs. Latitude')\n",
    "print(f\"The r-squared is: {rvalue}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data does not appear to show a high degree of correlation, if at all."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
